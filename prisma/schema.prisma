// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Plan {
    id        String     @id @default(cuid())
    name      String
    exercises Exercise[]
    supersets Superset[]

    userId String
    user   User   @relation(fields: [userId], references: [id])
}

model Superset {
    id String @id @default(cuid())

    index Int

    exercises Exercise[]
    Plan      Plan?      @relation(fields: [planId], references: [id])
    planId    String?
}

model Exercise {
    id String @id @default(cuid())

    index        Int
    name         String
    sets         Int?   @default(0)
    reps         Int?   @default(0)
    volume       Int?   @default(0)
    restTime     Int?   @default(0)
    exerciseTime Int?   @default(0)
    type         Type

    Superset Superset[]
    Plan     Plan?      @relation(fields: [planId], references: [id])
    planId   String?
}

enum Type {
    WEIGHT
    BODYWEIGHT
    STRETCH
    PNF
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Plan          Plan[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
